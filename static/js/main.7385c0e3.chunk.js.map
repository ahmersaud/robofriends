{"version":3,"sources":["Card.js","Cardlist.js","Searchbox.js","Scroll.js","ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","Cardlist","robots","CardArray","map","user","i","Searchbox","searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchchange","event","Searchtext","target","value","console","log","Robots","fetch","then","response","json","users","filteredrobots","filter","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAaeA,EAXJ,SAACC,GACR,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAG,sCAAiCF,EAAMG,GAAvC,WAAoDC,IAAI,YAChE,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eCWXC,EAjBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAKPC,EAAUD,EAAOE,KAAI,SAACC,EAAKC,GAC7B,OAAQ,cAAC,EAAD,CAAcT,GAAIK,EAAOI,GAAGT,GAAIE,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,OAA5DM,MAIvB,OACI,8BACOH,KCRAI,EANC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,uBAAOC,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,KCMpDI,EARF,SAAClB,GACV,OACI,qBAAKmB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,SAAhE,SACKtB,EAAMuB,YCqBJC,E,kDArBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IACDyB,MAAM,CACPC,UAAS,GAHC,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,0DAEAG,KAAK7B,MAAMuB,a,GAhBFQ,aCkEbC,E,kDA5DX,aAAc,IAAD,8BACT,gBAwBJC,eAAe,SAACC,GAEZ,EAAKJ,SAAS,CAACK,WAAWD,EAAME,OAAOC,QACvCC,QAAQC,IAAI,mBA1BZ,EAAKd,MAAM,CACPe,OAAO,GACPL,WAAW,IAEfG,QAAQC,IAAI,eANH,E,gEASO,IAAD,OAEfD,QAAQC,IAAI,qBAIZE,MAAM,8CACLC,MAAK,SAAAC,GACH,OAAOA,EAASC,UAChBF,MAAK,SAAAG,GACJ,EAAKf,SAAS,CAACU,OAAOK,S,+BAcrB,IAAD,OACJP,QAAQC,IAAI,UACZ,IAAMO,EAAejB,KAAKJ,MAAMe,OAAOO,QAAO,SAAAvC,GAC1C,OAAOA,EAAOH,KAAK2C,cAAcC,SAAS,EAAKxB,MAAMU,WAAWa,kBAGpE,OAA8B,IAA3BnB,KAAKJ,MAAMe,OAAOU,OACV,oBAAIjD,UAAU,KAAd,qBAGP,sBAAKA,UAAU,KAAf,UACI,6CAEA,cAAC,EAAD,CAAWa,aAAce,KAAKI,iBAE9B,cAAC,EAAD,UAEI,cAAC,EAAD,UACG,cAAC,EAAD,CAAUzB,OAASsC,e,GApDxBf,aCKHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACK,cAAC,EAAD,MAELC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7385c0e3.chunk.js","sourcesContent":["\r\n\r\nconst Card=(props)=>{\r\n    return(\r\n        <div className=\"tc bg-light-red dib br3 pa3 ma3 grow bw2 shadow5\">\r\n            <img src={`https://robohash.org/testing${props.id}200x200`} alt=\"robopic\"/>\r\n            <div>\r\n                <h1>{props.name}</h1>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import Card from './Card.js'\r\n\r\nconst Cardlist=({robots})=>{\r\n    // if(true){ \r\n    //     throw new Error(\"just a custom error\");\r\n    // }  just for testing\r\n\r\n    const CardArray=robots.map((user,i)=>{\r\n        return (<Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>); //adding key because reacts wants to keep track of components\r\n\r\n    });\r\n\r\n    return(\r\n        <div>\r\n              {CardArray}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","const Searchbox=({searchchange})=>{\r\n    return(\r\n        <input type=\"search\" placeholder=\"Search Robots\" onChange={searchchange}/>\r\n    );\r\n}\r\n\r\nexport default Searchbox;","const Scroll=(props)=>{\n    return (\n        <div style={{overflowY:'scroll',border:'1px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import { Component } from \"react\";\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state={\n            hasError:false\n        }\n    }\n\n    componentDidCatch(error,info){\n        this.setState({hasError:true});\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Oop!Something went wrong</h1>\n        }else{\n            return this.props.children;\n        }\n    }\n\n}\n\nexport default ErrorBoundary;","import Cardlist from \"./Cardlist\"\r\nimport Searchbox from \"./Searchbox\"\r\nimport Scroll from \"./Scroll\";\r\nimport ErrorBoundary from \"./ErrorBoundary\";\r\n\r\nimport { Component } from \"react\";\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            Robots:[],\r\n            Searchtext:\"\"\r\n        }\r\n        console.log(\"constructor\")\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        console.log('Componentdidmount');\r\n        //getting users from an API \r\n        //and using setstate() to update Robots\r\n        //storing users in Robots of the state\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{\r\n           return response.json();\r\n        }).then(users=>{\r\n            this.setState({Robots:users});\r\n        });\r\n    \r\n\r\n    }\r\n\r\n    onSearchchange=(event)=>{\r\n\r\n        this.setState({Searchtext:event.target.value})\r\n        console.log(\"onsearchchange\");\r\n    }\r\n    \r\n    \r\n\r\n    render(){\r\n        console.log(\"render\");\r\n        const filteredrobots=this.state.Robots.filter(robots=>{\r\n            return robots.name.toLowerCase().includes(this.state.Searchtext.toLowerCase());\r\n        })\r\n\r\n        if(this.state.Robots.length===0){\r\n            return(<h1 className=\"tc\">Loading</h1>)\r\n        }else{\r\n        return(\r\n            <div className=\"tc\">\r\n                <h1>RoboFriends</h1>\r\n\r\n                <Searchbox searchchange={this.onSearchchange}/>\r\n\r\n                <Scroll>\r\n                    \r\n                    <ErrorBoundary>\r\n                       <Cardlist robots= {filteredrobots}/>\r\n                    </ErrorBoundary>\r\n\r\n                </Scroll> \r\n            </div>    );}\r\n    }\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport \"tachyons\";\n\nimport App from \"./App\"\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n       <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}